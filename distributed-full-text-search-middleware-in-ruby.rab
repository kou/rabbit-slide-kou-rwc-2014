= Rubyを使った\n分散全文検索ミドルウェア

: author
   須藤功平
: institution
   株式会社クリアコード
: content-source
   RubyWorld Conference 2014
: date
   2014/11/13
: allotted-time
   30m
: theme
   .

= 趣意書 - 今

  * 今ではRubyは「当たり前」
  * Rubyはキャズム理論の段階を\n
    順当に進んできている
  * Rubyは「レートマジョリティ」\n
    にも到達しつつある
    * 「レートマジョリティ」 =\n
      「普通の人々」

= 趣意書 - これから

  * 「レートマジョリティ」に\n
    浸透させるには？
    * 技術だけを追求するのではなく、\n
      心理的、経済的、政治的な障害なども考慮する必要がある
  * Ruby普及における重要なテーマ
    * これらの障害を乗り越えた\n
      「浸透(penetration)」

= 趣意書 - まとめ

Rubyを\n
普通の人々に\n
浸透させたい！

= この発表の内容

浸透促進案の\n
ご提案

= 浸透の定義

Rubyを使っても\n
驚かない

= 普通の人々

  * IT系
    * いつもプログラムを書いている人
    * たまにプログラムを書く人
    * プログラムを使う人
  * 非IT系
    * こども

= 領域拡大な浸透方法

  * IT系
    * ((*いつもプログラムを書いている人*))
    * ((*たまにプログラムを書く人*))
    * プログラムを使う人
  * 非IT系
    * こども

= 新規開拓な浸透方法

  * IT系
    * いつもプログラムを書いている人
    * たまにプログラムを書く人
    * ((*プログラムを使う人*))
  * 非IT系
    * ((*こども*))

= 提案方針

  * 領域拡大にフォーカス
  * 新規開拓は考えない
    * おんがえしさんのofrubyは\n
      1つのやり方のように思える

= 領域拡大

  * 他の言語からの移行を促す
  * 技術的な攻め方
    * 多機能・高機能・高性能
  * 心理的・政治的な攻め方
    * 流行り(('note:（「みんな」使っていますよ）'))

= 領域拡大 - 提案方針

  * 他の言語からの移行を促す
  * 技術的な攻め方
    * 多機能・高機能・高性能
  * 心理的・政治的な攻め方
    * ((*流行り*))(('note:（「みんな」使っていますよ）'))

= 流行っている状態

(('tag:center'))シェアを独占している

  * キラーアプリがある
    * 例：Ruby on Rails
  * 有用アプリの多くがRuby製
    * 例：Chef, Puppet, Vagrant, Serverspec

= キラーアプリは難しい

(('tag:center'))シェアを独占している

  * (('del:キラーアプリがある'))
    * 例：Ruby on Rails
  * 有用アプリの多くがRuby製
    * 例：Chef, Puppet, Vagrant, Serverspec

= 多有用アプリ状況を目指す

  * 成功事例
    * 後続が真似したくなればよい
    * そんなに流行らなくてもよい
  * 開発ノウハウ
    * 後続が開発しやすくなる

= 領域拡大の対象分野案

(('tag:center'))ミドルウェア

  * データストア（RDBMSやKVS）
  * 検索システム
  * メッセージキュー
  * ログ活用（分析や監視）

= Rubyでミドルウェア

  * 成功事例
    * Fluentd
    * 分散全文検索エンジンを開発中\n
      (('note:（Droonga）'))
  * 開発ノウハウ
    * これから紹介
    * Rubyで新規に開発しようという人の\n
      役に立てばよい

= 強みの選び方

  * 最高速で勝負しない
  * 多機能で勝負しない
  * 使いやすさで勝負する

= 性能

  * 最高速は目指さない
    * C/C++とかJavaに負ける
  * 十分な速度は目指す

= 高速化方法

  * ボトルネックを確認！
  * ボトルネックになりやすい箇所
    * CPU
    * ネットワーク
  * なるかもしれない箇所
    * I/Oとメモリー

= CPUネック

  * マルチプロセス
    * 1スレッド・パイプ・spawn
  * Cで拡張ライブラリーを書く
    * Fluentd: MessagePack
    * Droonga: MessagePack, Groonga
    * ヒント：JSONはとても重い

= ネットワークネック

  * ノンブロッキングI/Oと多重化
    * 拡張ライブラリー必須
    * →Cool.io, nio4r, EventMachine
  * 通信量を減らす
    * データを減らす
    * ムリなら圧縮（zlib, LZ4）

= I/Oとメモリーネック

  * データストアをCで書く
    * Droonga: Groonga
    * ROMA: Tokyo Cabinet, SQLite3
  * コアの機能もCで書く
    * データコピーも減らしたいとき

= 強みの選び方 - 性能

  * 最高速で勝負しない
    * でも、十分な速度は目指す
    * 使いものになればよい
  * 多機能で勝負しない
  * 使いやすさで勝負する

= 機能

  * 多機能をウリにしない
    * 多機能だと遅くなる(('note:ことが多い'))
  * 組み込みの機能より拡張性
    * →プラグイン機能
    * Fluentd, ROMA, Droonga

= プラグイン機能のポイント

  * 開発者向け
    * 作りやすい
    * テストしやすい
    * リリースしやすい
  * ユーザー向け
    * インストールしやすい
    * 設定しやすい

= 開発者向け

  * 作りやすさ
    * scaffoldいらずのAPI
  * テストしやすさ
    * ドライバー・スタブを提供
  * リリースしやすさ
    * gem

= ユーザー向け

  * インストールのしやすさ
    * Rubyをそんなに知らない前提なのに\n
      直接gemを使ってもらうのってアリ？
  * 設定のしやすさ
    * できるだけ少なく
    * できればno configuration

= 強みの選び方 - 機能

  * 最高速で勝負しない
  * 多機能で勝負しない
    * 組込機能よりも簡単拡張で勝負
    * Ruby初心者でも開発できる簡単さ
    * →プラグイン開発でRubyデビュー\n
      (('note:（tDiaryスタイルのRuby浸透方法）'))
  * 使いやすさで勝負する

= 使いやすさ

  * 設定は少ないほうがよい
    * 適切なデフォルト値
    * 自動調整
  * 起動するだけなら設定なしで
    * 起動するまでが一番くじけやすい

= まとめ1

  * 趣意書
    * Rubyを浸透させたい！
  * この発表
    * 浸透促進案の提案
    * ミドルウェア分野での促進案

= まとめ2

  * 最高速で勝負しない
  * 多機能で勝負しない
  * 使いやすさで勝負する
